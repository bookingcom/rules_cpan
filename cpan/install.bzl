_MODULE_BUILD_TEMPLATE = """\
# AUTOGENERATED BY rules_cpan

load("@rules_perl//perl:perl.bzl", "perl_library")

perl_library(
    name = "{distribution}",
    srcs = glob(["**/*"], exclude=["t/**/*", "xt/**/*", "**/*.c", "**/*.cc", "**/*.h", "**/*.xs"]) {xs_module_dep},
    deps = [
        {deps}
    ],
    visibility = ["//visibility:public"],
)

{xs_module}
"""

_REPO_BUILD_TEMPLATE = """\
# AUTOGENERATED BY rules_cpan

load("@rules_perl//perl:perl.bzl", "perl_library")

exports_files(["**/*"])

perl_library(
    name = "{main_target_name}",
    deps = {deps},
    visibility = ["//visibility:public"],
)
"""

_PERL_XS_TEMPLATE = """\
# AUTOGENERATED BY rules_cpan

load("@rules_perl//perl:perl.bzl", "perl_xs", "perl_binary")

perl_xs(
    name = "{distribution}-xs",
    srcs = [{srcs}],
    cc_srcs = [{cc_srcs}],
    textual_hdrs = [{textual_hdrs}],
    defines = [
        "HAVE_LIMITS_H",
        "HAVE_NETDB_H",
        "HAVE_NETINET_IN_H",
        "HAVE_SYS_SOCKET_H",
        "HAVE_SYS_TIME_H",
        "HAVE_SYS_TYPES_H",
        "HAVE_UNISTD_H",
    ]
)
"""

def _get_xs_module(rctx, distribution, item, strip_prefix):
    if "xs_module_files" not in item:
        return ""

    all_files = [x.replace("{}/".format(strip_prefix), "") for x in item["xs_module_files"]]
    xs_files = [f for f in all_files if f.endswith(".xs")]
    cc_srcs = [f for f in all_files if f.endswith(".cc") or f.endswith(".c")]
    headers = [f for f in all_files if f.endswith(".h")]
    return _PERL_XS_TEMPLATE.format(
        distribution = distribution,
        srcs = ", ".join(['"{}"'.format(f) for f in xs_files]),
        cc_srcs = ", ".join(['"{}"'.format(f) for f in cc_srcs]),
        textual_hdrs = ", ".join(['"{}"'.format(f) for f in headers]),
    )

def _install_impl(rctx):
    rctx = rctx  # type: repository_ctx
    lockfile = json.decode(rctx.read(rctx.attr.lock))
    resolved = lockfile.get("resolved", lockfile)
    for distribution, item in resolved.items():
        rctx.download_and_extract(
            url = item["url"],
            sha256 = item["sha256"],
            stripPrefix = item["release"],
            output = distribution,
        )

        xs_module = _get_xs_module(rctx, distribution, item, strip_prefix = item["release"])

        rctx.file(
            distribution + "/BUILD",
            _MODULE_BUILD_TEMPLATE.format(
                distribution = distribution,
                deps = "\n".join(["        '{}',".format("//{}".format(dep.replace("::", "-"))) for dep in item["dependencies"]]),
                xs_module = xs_module,
                xs_module_dep = "" if not xs_module else " + [':{}-xs']".format(distribution),
            ),
            executable = False,
        )

    rctx.file("BUILD", _REPO_BUILD_TEMPLATE.format(
        main_target_name = rctx.attr.main_target_name,
        deps = ["//" + dep for dep in resolved.keys()],
    ), executable = False)
    rctx.file("WORKSPACE", "", executable = False)

install = repository_rule(
    attrs = {
        "lock": attr.label(allow_single_file = True, doc = "cpanfile snapshot lock file"),
        "main_target_name": attr.string(mandatory = True, doc = "The name of the top-level perl_library target. Ideally the same as the repo name."),
    },
    implementation = _install_impl,
)
