load("@bazel_skylib//lib:paths.bzl", "paths")

_MODULE_BUILD_TEMPLATE = """\
# AUTOGENERATED BY rules_cpan
load("@rules_cpan//cpan:cpan_library.bzl", "perl_cpan_library")

perl_cpan_library(
    name = "{distribution}",
    makefile_pl = "{makefile}",
    srcs = glob(["**/*.*", "**/*"], exclude=["{makefile}"]),
    build_deps = [ {build_requires} ],
    deps = [ {deps} ],
    visibility = ["//visibility:public"],
)
"""

_REPO_BUILD_TEMPLATE = """\
# AUTOGENERATED BY rules_cpan

load("@rules_perl//perl:perl.bzl", "perl_library")

exports_files(["**/*"])

perl_library(
    name = "{main_target_name}",
    deps = {deps},
    visibility = ["//visibility:public"],
)
"""

def _install_impl(rctx):
    rctx = rctx  # type: repository_ctx
    lockfile = json.decode(rctx.read(rctx.attr.lock))
    resolved = lockfile.get("resolved", lockfile)
    for distribution, item in resolved.items():
        rctx.download_and_extract(
            url = item["url"],
            sha256 = item["sha256"],
            stripPrefix = item["release"],
            output = distribution,
        )

        rctx.file(
            distribution + "/BUILD.bazel",
            _MODULE_BUILD_TEMPLATE.format(
                distribution = distribution,
                makefile = "Makefile.PL" if rctx.path("{}/Makefile.PL".format(distribution)).exists else "Build.PL",
                deps = "\n".join(["        '{}',".format("//{}".format(dep.replace("::", "-"))) for dep in item["dependencies"]]),
                build_requires = ", ".join(['"//{}"'.format(x.replace("::", "-")) for x in item.get("build_requires", [])]),
            ),
            executable = False,
        )

    rctx.file("BUILD", _REPO_BUILD_TEMPLATE.format(
        main_target_name = rctx.attr.main_target_name,
        deps = ["//" + dep for dep in resolved.keys()],
    ), executable = False)
    rctx.file("WORKSPACE", "", executable = False)

install = repository_rule(
    attrs = {
        "lock": attr.label(allow_single_file = True, doc = "cpanfile snapshot lock file"),
        "main_target_name": attr.string(mandatory = True, doc = "The name of the top-level perl_library target. Ideally the same as the repo name."),
    },
    implementation = _install_impl,
)

_PERL_TOOLCHAIN_PATH = """
use v5.36;

package PerlToolchain;

use constant PERL_TOOLCHAIN_PATH => "{perl_path}";

use Exporter;
our @ISA    = qw/ Exporter /;
our @EXPORT = qw/ PERL_TOOLCHAIN_PATH /;

1;

"""

def _perl_toolchain_path_impl(ctx):
    toolchain = ctx.toolchains["@rules_perl//perl:toolchain_type"].perl_runtime
    output = ctx.actions.declare_file("PerlToolchain.pm".format(ctx.attr.name))

    ctx.actions.write(
        output,
        _PERL_TOOLCHAIN_PATH.format(
            perl_path = paths.dirname(
                paths.dirname(
                    toolchain.interpreter.path,
                ),
            ),
        ),
    )

    return [
        DefaultInfo(
            files = depset([output]),
            runfiles = ctx.runfiles(files = [output]),
        ),
    ]

perl_toolchain_path = rule(
    implementation = _perl_toolchain_path_impl,
    toolchains = ["@rules_perl//perl:toolchain_type"],
)
